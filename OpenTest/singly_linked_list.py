from nodes import Node

class SingleLinkedList:
    def __init__(self):
        self.head = None

    def insert(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    def display(self):
        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

    def find_maximum(self):
        if not self.head:
            return None

        current = self.head
        max_data = current.data
        while current:
            if current.data > max_data:
                max_data = current.data
            current = current.next
        return max_data

    def find_minimum(self):
        if not self.head:
            return None

        current = self.head
        min_data = current.data
        while current:
            if current.data < min_data:
                min_data = current.data
            current = current.next
        return min_data

    def enqueue(self, data):
        self.insert(data)

    def dequeue(self):
        if not self.head:
            print("Queue is empty.")
            return None

        removed_data = self.head.data
        self.head = self.head.next
        return removed_data

    def display_queue(self):
        self.display()

    def merge_sort(self, head):
        if not head or not head.next:
            return head

        mid = self.find_middle(head)
        second_half = mid.next
        mid.next = None

        left = self.merge_sort(head)
        right = self.merge_sort(second_half)

        return self.merge(left, right)

    def find_middle(self, head):
        slow, fast = head, head
        while fast.next and fast.next.next:
            slow = slow.next
            fast = fast.next.next
        return slow

    def merge(self, left, right):
        dummy = Node(0)
        current = dummy

        while left and right:
            if left.data < right.data:
                current.next = left
                left = left.next
            else:
                current.next = right
                right = right.next
            current = current.next

        if left:
            current.next = left
        elif right:
            current.next = right

        return dummy.next

    def sort_queue(self):
        self.head = self.merge_sort(self.head)



